# Basic workflow
name: build

# Controls when the action will run
# Workflow begins with push or PR events
# Focuses on the master branch only
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# Create one single job
# This job performs all necessary checks
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      # Turning fail-fast off ensures the entire strategy matrix is allowed to
      # run to completion, allowing detection of individual platform issues
      # regardless of the status of the other platforms.
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.8, 3.9]
    env:
      # These environment variables are passed to CodeCov to identify each build
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}
    # Define the workflow steps
    steps:
        # Checkout the code of the repository
        - name: Check out Repository Code
          uses: actions/checkout@v2
          with:
            fetch-depth: 0
        # Run the mdl linting tool
        # Refers to .mdlrc file in repository
        - name: Run Markdown Linting
          if: runner.os=='Linux'
          uses: actionshub/markdownlint@main
        # Setup Python for the current language version
        - name: Setup Python ${{ matrix.python-version }}
          uses: actions/setup-python@v1
          with:
            python-version: ${{ matrix.python-version }}
        # Install poetry
        - name: Install Poetry
          uses: abatilo/actions-poetry@v2.0.0
          with:
            poetry-version: 1.1.0
        # Run the Python program
        - name: Run Python Program
          env:
            SHEETFU_CONFIG_TYPE: ${{secrets.SHEETFU_CONFIG_TYPE}}
            SHEETFU_CONFIG_TOKEN_URI: ${{secrets.SHEETFU_CONFIG_TOKEN_URI}}
            SHEETFU_CONFIG_SHEETFU_CONFIG_PROJECT_ID: ${{secrets.SHEETFU_CONFIG_SHEETFU_CONFIG_PROJECT_ID}}
            SHEETFU_CONFIG_PRIVATE_KEY_ID: ${{secrets.SHEETFU_CONFIG_PRIVATE_KEY_ID}}
            SHEETFU_CONFIG_PRIVATE_KEY: ${{secrets.SHEETFU_CONFIG_PRIVATE_KEY}}
            SHEETFU_CONFIG_CLIENT_X509_CERT_URL: ${{secrets.SHEETFU_CONFIG_CLIENT_X509_CERT_URL}}
            SHEETFU_CONFIG_CLIENT_ID: ${{secrets.SHEETFU_CONFIG_CLIENT_ID}}
            SHEETFU_CONFIG_CLIENT_EMAIL: ${{secrets.SHEETFU_CONFIG_CLIENT_EMAIL}}
            SHEETFU_CONFIG_AUTH_URI: ${{secrets.SHEETFU_CONFIG_AUTH_URI}}
            SHEETFU_CONFIG_AUTH_PROVIDER_X509_CERT_URL: ${{secrets.SHEETFU_CONFIG_AUTH_PROVIDER_X509_CERT_URL}}
          run: |
            cd meSMSage
            echo $SHEETFU_CONFIG_TYPE
            poetry install
            poetry run mesmsage send --googlesheet-id 1ujmuIJy1NPhasIF4tnRSae0033hwa9g0wul5Ii2NwZU --debug-level DEBUG
        # Run the pytest test suite
        - name: Run Pytest Test Suite
          env:
            SHEETFU_CONFIG_TYPE: ${{secrets.SHEETFU_CONFIG_TYPE}}
            SHEETFU_CONFIG_TOKEN_URI: ${{secrets.SHEETFU_CONFIG_TOKEN_URI}}
            SHEETFU_CONFIG_SHEETFU_CONFIG_PROJECT_ID: ${{secrets.SHEETFU_CONFIG_SHEETFU_CONFIG_PROJECT_ID}}
            SHEETFU_CONFIG_PRIVATE_KEY_ID: ${{secrets.SHEETFU_CONFIG_PRIVATE_KEY_ID}}
            SHEETFU_CONFIG_PRIVATE_KEY: ${{secrets.SHEETFU_CONFIG_PRIVATE_KEY}}
            SHEETFU_CONFIG_CLIENT_X509_CERT_URL: ${{secrets.SHEETFU_CONFIG_CLIENT_X509_CERT_URL}}
            SHEETFU_CONFIG_CLIENT_ID: ${{secrets.SHEETFU_CONFIG_CLIENT_ID}}
            SHEETFU_CONFIG_CLIENT_EMAIL: ${{secrets.SHEETFU_CONFIG_CLIENT_EMAIL}}
            SHEETFU_CONFIG_AUTH_URI: ${{secrets.SHEETFU_CONFIG_AUTH_URI}}
            SHEETFU_CONFIG_AUTH_PROVIDER_X509_CERT_URL: ${{secrets.SHEETFU_CONFIG_AUTH_PROVIDER_X509_CERT_URL}}
          run: |
            cd meSMSage
            poetry run pytest
        # Run the black code formatter in checking mode
        - name: Run Black Code Formatter
          run: |
            cd meSMSage
            poetry run black meSMSage tests --check
        # Run the flake8 linting tool
        - name: Run Flake8 Linting Tool
          run: |
            cd meSMSage
            poetry run flake8 meSMSage tests
        # Run the pydocstyle linting tool
        - name: Run pydocstyle Linting Tool
          run: |
            cd meSMSage
            poetry run pydocstyle meSMSage tests
        # Run the pylint linting tool
        - name: Run Pylint Linting Tool
          run: |
            cd meSMSage
            poetry run pylint meSMSage tests
